The bitslicer pass should help programmers to implement techniques that benefit from a bitsliced
representation of data.

The programmer should be able to choose any cutting-hedge countermeasure to make its new 
implementation more secure.
The bitslicer must be available just to support the programmer in the implementation by doing 
the 'dirty work' of splitting the variables and managing the slices, and of course provide the
programmer with an interface, a tool to access the single bits in order to implement such 
countermeasures.

e.g.: to access the bit j of the element i of array[8]:

unsigned char __bitslice__ array[10];

	for(i=0; i<10; i++){
		for(j=0; j<8; j++){
			...
			array + bit(i,j);
			...
		}
	}
	
and the function bit(i,j) might be a function that returns the actuall address of the requested
bit.

Of course it would be nicer to be able to do:
	
	array[bit(i,j)];
	
but bit() should return just an integer in order not to generate errors, a proper integer that 
could lead to the correct bit (so probably > 10, would it cause warnings?)
Would bit() benefit from being a builtin function?

Tables may be a security issue due to cache-based timing attacks, but the idea of implementing
a boolean function equivalent to the usage of such function may be tricky because according to
the introduction of:

https://eprint.iacr.org/2011/332.pdf

there are a lot of possible functions to implement a single output bit of an average table
with 8 bits in input, and it would be hard to make the program find the optimal function
automatically.
We can let the programmer implement his own boolean function, so that he can choose the best
option among the best heuristic results on the cutting hedge of these virtual circuit 
implementations of tables.

Some other countermeasures may benefit from bitslicing (other than implementing the tables
as boolean circuits) such as inserting redundant bits in order to check the integrity of data
against fault attacks:

https://eprint.iacr.org/2016/850.pdf


First of all we should implement a bitslicer that does the minimal transformations required
to implement such countermeasures, then we might add the automatizations of some of those
countermeasures.


Would it be useful to introduce a way to neutralize a warning targeting a particular line?
Just in case the programmer decides that the detected potential weakness is not a real
weakness.
Maybe something that can be applied to the code itself? In order to let the programmer
keep locality, but not addressing the whole line, that might contain other weaknesses reported
by other warnings.
Maybe a way to identify and address a particular warning? such as a reference number or similar
that can be used in the file or on the command line.


The bitslicer should:
1) Hide the bitliced data and the bitslicing work to the programmer.
	- for each 'store' instruction the value is bitsliced
	- for each 'load' instruction the value is recomposed

This way also interactions with data that are not supposed to be bitsliced are permitted, without the need
to bitslice them too and the related operations.

2) Provide the programmer with an interface, a tool, that can go through the 'bitslicing' wall
and access individual bits. The bit(i,j) intrinsic.


